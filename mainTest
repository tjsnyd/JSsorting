//My sorting functions

function sortObj(message, time){
    this.message = message;
    this.time = time;
};


// 1: MergeSort
var mergeSort = function(ar){
    var sort = function(arr){
        var middle = Math.floor(arr.length / 2);
        var leftSub = arr.slice(0,middle);
        var rightSub = arr.slice(middle, arr.length);
        if(arr.length === 1){
            return arr;
        }
        return merge(sort(leftSub), sort(rightSub));
    };
    var merge = function(leftSub,rightSub){
        var result = [];
        while(leftSub.length || rightSub.length){
            if(leftSub.length && rightSub.length){
                if(leftSub[0] <= rightSub[0]){
                    result.push(leftSub.shift());
                }else{
                    result.push(rightSub.shift());
                }
            } else if(leftSub.length) {
                result.push(leftSub.shift());
            } else {
                result.push(rightSub.shift());
            }
        }
        return result;
    };
    
    return sort(ar);
};

// 2: BubbleSort

var bubbleSort = function(arr){
    var length = arr.length;
    for(var i = 0; i < length; i++){
        for(var k = 0; k < length - 1; k++){
            if(arr[k] > arr[k + 1]){
                var t = arr[k + 1];
                arr[k + 1] = arr[k];
                arr[k] = t;
            }
        }
    }
    return arr;
};

var bubbleSortO = function(arr,func){
    var length = arr.length;
    for(var i = 0; i < length; i++){
        for(var k = 0; k < length - 1; k++){
            if(func(arr[k], arr[k + 1])){
                var t = arr[k + 1];
                arr[k + 1] = arr[k];
                arr[k] = t;
            }
        }
    }
    return arr;
};

//MyQuicksort
//with random pivot
var quickSortR = function(arr){
    len = arr.length;
    if(len === 0){
        return arr;
    }
    
    var left = [];
    var right = [];
    var pivot = arr[Math.floor(Math.random() * len)];
    
    for(var i = 0; i < len - 1; i++){
        if(arr[i] < pivot) {
            left.push(arr[i]);
        }else{
            right.push(arr[i]);
        }
    }
    return quickSortR(left).concat(pivot, quickSortR(right));
}
//pivot always at first index
var quickSort = function(arr){
    len = arr.length;
    if(len === 0){
        return arr;
    }
    
    var left = [];
    var right = [];
    var pivot = arr[0];
    
    for(var i = 0; i < len - 1; i++){
        if(arr[i] < pivot) {
            left.push(arr[i]);
        }else{
            right.push(arr[i]);
        }
    }
    return quickSort(left).concat(pivot, quickSort(right));
}

//pivot always at last index
var quickSortL = function(arr){
    len = arr.length;
    if(len === 0){
        return arr;
    }
    
    var left = [];
    var right = [];
    var pivot = arr[len-1];
    
    for(var i = 0; i < len - 1; i++){
        if(arr[i] < pivot) {
            left.push(arr[i]);
        }else{
            right.push(arr[i]);
        }
    }
    return quickSortL(left).concat(pivot, quickSortL(right));
}


//My InsertionSort
var insertSort = function(arr){
    var len = arr.length;
    var x;
    var j;
    for(var i = 1; i < len - 1; i++){
        x = arr[i];
        j = i;
        while(j > 0 && arr[j - 1] > x){
            arr[j] = arr[j - 1];
            j--;
        }
        arr[j] = x;
    }
    return arr;
}



var makeRandArr = function(count){
    var a = [];
    var x = 0;
    while (x < count){
        x+=1;
        a.push(Math.floor((Math.random() * count) + 1));
    }
    return a;
}

var testAvgSortTime = function(someFunc, arrSize, sampSize){
    var a = makeRandArr(arrSize);
    var results = [];
    var x = 0;
    var average = function(arr){
        return arr.reduce(function(a, b) { return a + b; }) / (arr.length || 1);
    };
    if(someFunc !== 0){
        var start = new Date().getTime();
        var sortA = someFunc(a);
        var end = new Date().getTime();
        while(x < sampSize){
            results.push(end - start);
            a = makeRandArr(arrSize);
            start = new Date().getTime();
            sortA = mergeSort(a);
            end = new Date().getTime();
            x += 1;
        }
    }
    else if(someFunc === 0){
        var start = new Date().getTime();
        a.sort();
        var end = new Date().getTime();
        while(x < sampSize){
            results.push(end - start);
            a = makeRandArr(arrSize);
            start = new Date().getTime();
            a.sort();
            end = new Date().getTime();
            x +=1;
        }
    }
    return average(results);
};

function comp(obj1, obj2){

        if(obj1.time < obj2.time){
            return true;
        }
        else{
            return false;
        }
};

var testSorts = function(arrSize, numTimes){
    var merge = new sortObj("Merge Average: ", testAvgSortTime(mergeSort, arrSize, numTimes));
    var insert = new sortObj("Insert Average: ", testAvgSortTime(insertSort, arrSize, numTimes));
    var quick = new sortObj("Quick Average: ", testAvgSortTime(quickSort, arrSize, numTimes));
    var quickR = new sortObj("Quick (rand pivot) Average: ", testAvgSortTime(quickSortR, arrSize, numTimes));
    var quickL = new sortObj("Quick (end pivot) Average: ", testAvgSortTime(quickSortL, arrSize, numTimes));
    var bubble = new sortObj("MyBubbleTime average: " , testAvgSortTime(bubbleSort, arrSize, numTimes));
    var jsSort = new sortObj("Built in Average: ", testAvgSortTime(0, arrSize, numTimes));
    
    var objArr = [merge,insert,quick,quickR,quickL,bubble,jsSort];
    
    objArr = bubbleSortO(objArr, comp);
    console.log(objArr);
    
};

testSorts(10,10000);

