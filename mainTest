//My sorting functions

function sortObj(message, time){
    this.message = message;
    this.time = time;
};


// 1: MergeSort
var mergeSort = function(arr){
    var sort = function(arr){
        var middle = Math.floor(arr.length / 2);
        var leftSub = arr.slice(0,middle);
        var rightSub = arr.slice(middle, arr.length);
        if(arr.length === 1){
            return arr;
        }
        return merge(sort(leftSub), sort(rightSub));
    };
    var merge = function(leftSub,rightSub){
        var result = [];
        while(leftSub.length || rightSub.length){
            if(leftSub.length && rightSub.length){
                if(leftSub[0] <= rightSub[0]){
                    result.push(leftSub.shift());
                }else{
                    result.push(rightSub.shift());
                }
            } else if(leftSub.length) {
                result.push(leftSub.shift());
            } else {
                result.push(rightSub.shift());
            }
        }
        return result;
    };
    
    return sort(arr);
};

// 2: BubbleSort

var bubbleSort = function(arr){
    var length = arr.length;
    for(var i = 0; i < length; i++){
        for(var k = 0; k < length - 1; k++){
            if(arr[k] > arr[k + 1]){
                var t = arr[k + 1];
                arr[k + 1] = arr[k];
                arr[k] = t;
            }
        }
    }
    return arr;
};

var bubbleSortO = function(arr,func){
    var length = arr.length;
    for(var i = 0; i < length; i++){
        for(var k = 0; k < length - 1; k++){
            if(func(arr[k], arr[k + 1])){
                var t = arr[k + 1];
                arr[k + 1] = arr[k];
                arr[k] = t;
            }
        }
    }
};

//MyQuicksort
//with random pivot
var quickSortR = function(arr){
    var len = arr.length;
    var part = function(arr,left,right){
        var temp;
        var i = left;
        var j = right;
        var pivot = arr[(left+right)/2];
        while(i<=j){
            while(arr[i]<pivot){
                i++;
            }
            while(arr[j] > pivot){
                j--;
            }
            if(i<=j) {
                temp= arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
                i++;
                j--;
            }
        }
        return i;
    };
    var sort = function(arr, left, right){
        var index = part(arr,left,right);
        if(left < index - 1){
            sort(arr,left,index-1);
        }
        if(index < right){
            sort(arr,index,right);
        }
        return arr;
    };
    
    return sort(arr,0,len-1);
    
}

//pivot always at first index
var quickSort = function(arr){
    var len = arr.length;
    var part = function(arr,left,right){
        var temp;
        var i = left;
        var j = right;
        var pivot = arr[(left+right)/2];
        while(i<=j){
            while(arr[i]<pivot){
                i++;
            }
            while(arr[j] > pivot){
                j--;
            }
            if(i<=j) {
                temp= arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
                i++;
                j--;
            }
        }
        return i;
    };
    var sort = function(arr, left, right){
        var index = part(arr,left,right);
        if(left < index - 1){
            sort(arr,left,index-1);
        }
        if(index < right){
            sort(arr,index,right);
        }
        return arr;
    };
    
    return sort(arr,0,len-1);
    
}

//pivot always at last index
var quickSortL = function(arr){
    len = arr.length;
    if(len === 0){
        return arr;
    }
    
    var left = [];
    var right = [];
    var pivot = arr[len-1];
    
    for(var i = 0; i < len - 1; i++){
        if(arr[i] < pivot) {
            left.push(arr[i]);
        }else{
            right.push(arr[i]);
        }
    }
    return quickSortL(left).concat(pivot, quickSortL(right));
}


//My InsertionSort
var insertSort = function(arr){
    var len = arr.length;
    var x;
    var j;
    for(var i = 1; i < len - 1; i++){
        x = arr[i];
        j = i;
        while(j > 0 && arr[j - 1] > x){
            arr[j] = arr[j - 1];
            j--;
        }
        arr[j] = x;
    }
    return arr;
}

//Borrowed Heapsort from mgechev

var heapSort = (function () {
    function heapify(array, index, heapSize) {
        var left = 2 * index + 1,
            right = 2 * index + 2,
            largest = index;

        if (left < heapSize && array[left] > array[index])
            largest = left;

        if (right < heapSize && array[right] > array[largest])
            largest = right;

        if (largest !== index) {
            var temp = array[index];
            array[index] = array[largest];
            array[largest] = temp;
            heapify(array, largest, heapSize);
        }
    }

    function buildMaxHeap(array) {
        for (var i = Math.floor(array.length / 2); i >= 0; i -= 1) {
            heapify(array, i, array.length);
        }
        return array;
    }

    return function (array) {
        var size = array.length,
            temp;
        buildMaxHeap(array);
        for (var i = array.length - 1; i > 0; i -= 1) {
            temp = array[0];
            array[0] = array[i];
            array[i] = temp;
            size -= 1;
            heapify(array, 0, size);
        }
        return array;
    };
}());



var makeRandArr = function(count){
    var a = [];
    var x = 0;
    while (x < count){
        x+=1;
        a.push(Math.floor((Math.random() * count) + 1));
    }
    return a;
}

var average = function(arr){
        return arr.reduce(function(a, b) { return a + b; }) / (arr.length || 1);
};


var timeCheck = function(func, arr){
    var start;
    var end;
    var sortA;
    if(func === 0){
        start = performance.now();
        arr.sort();
        end = performance.now();
        return end - start;
    }
    else{
        start = performance.now();
        func(arr);
        end = performance.now();
        return end - start;
    }
}

var testAvgSortTime = function(arrSize){
    var a = makeRandArr(arrSize);
    var results = [];
    var x = 0;
    
    //test all of the sorts, build return array sytax is [merge,ins,q,qr,ql,b,d]
    
    //results.push(timeCheck(mergeSort,a));
    results.push(0);
    //results.push(timeCheck(insertSort,a));
    results.push(0);
    console.log(a);
    results.push(timeCheck(quickSort,a));
    
    console.log(a);
    results.push(timeCheck(quickSort,a));
    
    //results.push(timeCheck(quickSortL,a));
    console.log(a);
    //results.push(timeCheck(bubbleSort,a));
    results.push(0);
    results.push(0);
    //results.push(0);
    
    results.push(timeCheck(heapSort,a));
    console.log(a);
    results.push(timeCheck(0,a));
    console.log(a);
    return results;
};

function comp(obj1, obj2){
        if(obj1.time < obj2.time){
            return true;
        }
        else{
            return false;
        }
};

var testSorts = function(arrSize, numTimes){
    var merge = [];
    var insert = [];
    var quick = [];
    var quickR = [];
    var quickL = [];
    var bubble = [];
    var heap = [];
    var jsSort = [];
    
    var results;
    
    for(var x = 0; x < numTimes - 1; x++){
        results = testAvgSortTime(arrSize);
        merge.push(results[0]);
        insert.push(results[1]);
        quick.push(results[2]);
        quickR.push(results[3]);
        quickL.push(results[4]);
        bubble.push(results[5]);
        heap.push(results[6]);
        jsSort.push(results[7]);
       
    };
    results = [average(merge), average(insert), average(quick), average(quickR), average(quickL), average(bubble), average(heap), average(jsSort)];
    //results = bubbleSort(results);
    console.log(results);
    
};

//testSorts(10,2);

var a = makeRandArr(10);
console.log(a);
var x = quickSortR(a);
console.log(a);
console.log(x);







