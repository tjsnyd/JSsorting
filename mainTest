//My sorting functions

function sortObj(message, time){
    this.message = message;
    this.time = time;
};


// 1: MergeSort
function mergeSort(arr){
    var sort = function(arr){
        var middle = Math.floor(arr.length / 2);
        var leftSub = arr.slice(0,middle);
        var rightSub = arr.slice(middle, arr.length);
        if(arr.length === 1){
            return arr;
        }
        return merge(sort(leftSub), sort(rightSub));
    };
    var merge = function(leftSub,rightSub){
        var result = [];
        while(leftSub.length || rightSub.length){
            if(leftSub.length && rightSub.length){
                if(leftSub[0] <= rightSub[0]){
                    result.push(leftSub.shift());
                }else{
                    result.push(rightSub.shift());
                }
            } else if(leftSub.length) {
                result.push(leftSub.shift());
            } else {
                result.push(rightSub.shift());
            }
        }
        return result;
    };
    
    return sort(arr);
};

// 2: BubbleSort

function bubbleSort(arr){
    var length = arr.length;
    for(var i = 0; i < length; i++){
        for(var k = 0; k < length - 1; k++){
            if(arr[k] > arr[k + 1]){
                var t = arr[k + 1];
                arr[k + 1] = arr[k];
                arr[k] = t;
            }
        }
    }
    return arr;
};

var bubbleSortO = function(arr,func){
    var length = arr.length;
    for(var i = 0; i < length; i++){
        for(var k = 0; k < length - 1; k++){
            if(func(arr[k], arr[k + 1])){
                var t = arr[k + 1];
                arr[k + 1] = arr[k];
                arr[k] = t;
            }
        }
    }
};

//MyQuicksort
//with random pivot
function quickSortR(arr){
    len = arr.length;
    if(len === 0){
        return arr;
    }
    
    var left = [];
    var right = [];
    var pivot = arr[Math.floor(Math.random() * len)];
    
    for(var i = 0; i < len - 1; i++){
        if(arr[i] < pivot) {
            left.push(arr[i]);
        }else{
            right.push(arr[i]);
        }
    }
    return quickSortL(left).concat(pivot, quickSortL(right));
}

//pivot always at first index
function quickSort(arr){
    len = arr.length;
    if(len === 0){
        return arr;
    }
    
    var left = [];
    var right = [];
    var pivot = arr[len/2 / 1];
    
    for(var i = 0; i < len - 1; i++){
        if(arr[i] < pivot) {
            left.push(arr[i]);
        }else{
            right.push(arr[i]);
        }
    }
    return quickSortL(left).concat(pivot, quickSortL(right));
}

//pivot always at last index
function quickSortL(arr){
    len = arr.length;
    if(len === 0){
        return arr;
    }
    
    var left = [];
    var right = [];
    var pivot = arr[len-1];
    
    for(var i = 0; i < len - 1; i++){
        if(arr[i] < pivot) {
            left.push(arr[i]);
        }else{
            right.push(arr[i]);
        }
    }
    return quickSortL(left).concat(pivot, quickSortL(right));
}


//My InsertionSort
function insertSort(arr){
    var len = arr.length;
    var x;
    var j;
    for(var i = 1; i < len - 1; i++){
        x = arr[i];
        j = i;
        while(j > 0 && arr[j - 1] > x){
            arr[j] = arr[j - 1];
            j--;
        }
        arr[j] = x;
    }
    return arr;
}

//Borrowed Heapsort from mgechev

var heapSort = (function() {
    function heapify(array, index, heapSize) {
        var left = 2 * index + 1,
            right = 2 * index + 2,
            largest = index;

        if (left < heapSize && array[left] > array[index])
            largest = left;

        if (right < heapSize && array[right] > array[largest])
            largest = right;

        if (largest !== index) {
            var temp = array[index];
            array[index] = array[largest];
            array[largest] = temp;
            heapify(array, largest, heapSize);
        }
    }

    function buildMaxHeap(array) {
        for (var i = Math.floor(array.length / 2); i >= 0; i -= 1) {
            heapify(array, i, array.length);
        }
        return array;
    }

    return function (array) {
        var size = array.length,
            temp;
        buildMaxHeap(array);
        for (var i = array.length - 1; i > 0; i -= 1) {
            temp = array[0];
            array[0] = array[i];
            array[i] = temp;
            size -= 1;
            heapify(array, 0, size);
        }
        return array;
    };
}());



var makeRandArr = function(count){
    var a = [];
    var x = 0;
    while (x < count){
        x+=1;
        a.push(Math.floor((Math.random() * count) + 1));
    }
    return a;
}

var average = function(arr){
        return arr.reduce(function(a, b) { return a + b; }) / (arr.length || 1);
};

function getFnName(fn) {
  var f = typeof fn == 'function';
  var s = f && ((fn.name && ['', fn.name]) || fn.toString().match(/function ([^\(]+)/));
  return (!f && 'not a function') || (s && s[1] || 'anonymous');
};

var timeCheck = function(func, arr){
    var start;
    var end;
    var sortA;
    if(func === 0){
        //console.log("default: " + arr);
        start = performance.now();
        arr.sort();
        end = performance.now();
        //console.log("after default: " + arr);
        return end - start;
    }
    else{
        //console.log("before " +getFnName(func) + ": " +arr);
        start = performance.now();
        func(arr);
        end = performance.now();
        //console.log("after " + getFnName(func) + ": " +arr);
        return end - start;
        
    }
}

var testAvgSortTime = function(arrSize){
    var a = makeRandArr(arrSize);
    var results = [];
    var x = 0;
    
    //test all of the sorts, build return array sytax is [merge,ins,q,qr,ql,b,d]
    
    results.push(timeCheck(mergeSort,a.slice(0)));
    results.push(timeCheck(insertSort,a.slice(0)));
    results.push(timeCheck(quickSort,a.slice(0)));
    results.push(timeCheck(quickSortR,a.slice(0)));
    results.push(timeCheck(quickSortL,a.slice(0)));
    results.push(timeCheck(bubbleSort,a.slice(0)));
    results.push(timeCheck(heapSort,a.slice(0)));
    results.push(timeCheck(0,a));
    return results;
};

function comp(obj1, obj2){
        if(obj1.time < obj2.time){
            return true;
        }
        else{
            return false;
        }
};

var testSorts = function(arrSize, numTimes){
    var merge = [];
    var insert = [];
    var quick = [];
    var quickR = [];
    var quickL = [];
    var bubble = [];
    var heap = [];
    var jsSort = [];
    
    var results;
    
    for(var x = 0; x < numTimes; x++){
        
        results = testAvgSortTime(arrSize);
        
        merge.push(results[0]);
        insert.push(results[1]);
        quick.push(results[2]);
        quickR.push(results[3]);
        quickL.push(results[4]);
        bubble.push(results[5]);
        heap.push(results[6]);
        jsSort.push(results[7]);
       
    };
    results = [average(merge), average(insert), average(quick), average(quickR), average(quickL), average(bubble), average(heap), average(jsSort)];
    var m0 = new sortObj("Merge Average Time", results[0]);
    var m1 = new sortObj("Insert Average Time", results[1]);
    var m2 = new sortObj("Quick Average Time", results[2]);
    var m3 = new sortObj("QuickR Average Time", results[3]);
    var m4 = new sortObj("QuickL Average Time", results[4]);
    var m5 = new sortObj("Bubble Average Time", results[5]);
    var m6 = new sortObj("Heap Average Time", results[6]);
    var m7 = new sortObj("Default Average Time", results[7]);
    results = [m0,m1,m2,m3,m4,m5,m6,m7];
    bubbleSortO(results,comp);
    console.log(results);
    
};

testSorts(5000,1000);


